Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 securityonion-squert (20161212-1ubuntu1securityonion16) trusty; urgency=medium
 .
   * merge and adjust comment
Author: Doug Burks <doug.burks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- securityonion-squert-20161212.orig/.inc/callback.php
+++ securityonion-squert-20161212/.inc/callback.php
@@ -621,8 +621,8 @@ function filters() {
 
     $rows = array();
 
+    # iterate through each row of the filter table
     while ($row = mysql_fetch_assoc($result)) {
-	# we're now iterating through each row of the filter table
 	# for each field in that row, we need to sanitize before output
 	foreach ($row as &$value) {
 		# https://paragonie.com/blog/2015/06/preventing-xss-vulnerabilities-in-php-everything-you-need-know
--- securityonion-squert-20161212.orig/.js/squertBoxes.js
+++ securityonion-squert-20161212/.js/squertBoxes.js
@@ -505,14 +505,24 @@ $(document).ready(function(){
       if (builtins.indexOf(filterTxt.alias) != -1) throw 1;
       
       // Sanitize name
-      var re = /^[?a-zA-Z][\w-]*$/;
+      var re = /^[?a-zA-Z][\w-\s]*$/;
       var OK = re.exec(filterTxt.name);
       if (!OK) throw 2;
       if (filterTxt.name == "New") throw 2;
 
       // If creating a new filter make sure this name doesn't already exist
       if ($("#tr_" + filterTxt.name)[0] && $('#tr_New')[0]) throw 2;
-	
+
+      // Sanitize notes
+      var re = /^[?a-zA-Z][\w-.\s]*$/;
+      var OK = re.exec(filterTxt.notes);
+      if (!OK) throw 2;
+     
+      // Sanitize url
+      var re = /^[?\/a-zA-Z0-9.\/:?${}(),_!&'@=\-\*#%]*$/;
+      var OK = re.exec(filterTxt.url);
+      if (!OK) throw 3;
+       
       // Continue..
       oldCL = currentCL;
       var ftype = $(".hp_type_active").data("val");
@@ -568,13 +578,17 @@ $(document).ready(function(){
           eMsg += "Aa-Zz, 0-9, - and _ . ";
           eMsg += "The word \"New\" is reserved and may not be used.";
         break;
+	case 3:
+          eMsg += "<span class=warn><br>Error!</span> "
+	  eMsg += "URL format not valid!";
+	break;
         default:
           eMsg += "<span class=warn><br>Format error!</span> ";
           eMsg += "Please ensure the format above is valid JSON. ";
-          eMsg += "I am looking for an opening curly brace <b>\"{\"</b> followed by <b>\"object\": \"value\"</b> ";
+          eMsg += "Ex. An opening curly brace <b>\"{\"</b> followed by <b>\"object\": \"value\"</b> ";
           eMsg += "pairs.<br> Each <b>\"object\": \"value\"</b> pair terminates with a comma <b>\",\"</b> except ";
           eMsg += "the last pair before the closing curly brace <b>\"}\"</b>.";
-          eMsg += " Strings must be enclosed within double quotes.";
+          eMsg += "Strings must be enclosed within double quotes.";
         break;
       }
       $('.filter_error').append(eMsg);
